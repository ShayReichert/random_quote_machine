{"version":3,"sources":["RandomQuotesMachine/QuoteText.js","RandomQuotesMachine/QuoteAuthor.js","RandomQuotesMachine/Buttons.js","RandomQuotesMachine/QuoteBox.js","RandomQuotesMachine/QuotesWrapper.js","App.js","serviceWorker.js","index.js"],"names":["QuoteText","style","color","this","props","randomColor","className","id","randomSentence","Component","QuoteAuthor","randomAuthor","Buttons","randomClickandOnClick","randomclick","onclick","href","target","rel","backgroundColor","onClick","QuoteBox","state","appearQuote","sentence","author","randomNumb","Math","floor","random","jsonQuotes","quotes","length","randomQuoteAndAuthor","setState","quote","QuotesWrapper","randomChannel","s","toString","newBackgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd3563cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass QuoteText extends Component {\n\n    \n    render() {\n        return (\n            <div style={{ color: this.props.randomColor }} className=\"quote-text\">\n                <i className=\"fas fa-quote-left\"></i>\n                <div id=\"text\">{this.props.randomSentence}</div>\n            </div>\n        )\n    }\n}\n\nexport default QuoteText;","import React, { Component } from 'react';\n\nclass QuoteAuthor extends Component {\n    render() {\n        const { randomAuthor, randomColor } = this.props;\n        return (\n            <div style={{color: randomColor}} className=\"quote-author\">\n                <div id=\"author\"> - {randomAuthor}</div>\n            </div>\n        )\n    }\n}\n\nexport default QuoteAuthor;","import React, { Component } from 'react'\n\nclass Buttons extends Component {\n\n    //Import 2 props in one function for onClick' event :\n    randomClickandOnClick = () => {\n        this.props.randomclick();\n        this.props.onclick();\n    }\n\n  \n\n\n    render() {\n        const { randomColor, randomSentence, randomAuthor } = this.props;\n        return (\n            <div className=\"button\">\n                <a href={`https://twitter.com/intent/tweet?text=\"${randomSentence}\"%20-%20${randomAuthor}&hashtags=fakequotes`}  target=\"_blank\" rel=\"noopener noreferrer\" style={{backgroundColor: randomColor}} id=\"tweet-quote\"><i className=\"fab fa-twitter\"></i></a>\n                <a href={`https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=fakequotes&caption=${randomAuthor}&content=\"${randomSentence}\"&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button`} target=\"_blank\" rel=\"noopener noreferrer\" style={{backgroundColor: randomColor}} id=\"fb-btn\"><i className=\"fab fa-tumblr\"></i></a>\n                <button style={{backgroundColor: randomColor}}  onClick={this.randomClickandOnClick} className=\"btn-new-sentence\" id=\"new-quote\">Nouvelle Phrase</button>\n            </div>\n        )\n    }\n}\nexport default Buttons;","import React, { Component } from 'react';\nimport QuoteText from './QuoteText';\nimport QuoteAuthor from './QuoteAuthor';\nimport Buttons from './Buttons';\nimport jsonQuotes from '../quotes.json';\n\nclass QuoteBox extends Component {\n\n    state = {\n        appearQuote: true,\n        sentence: \"Elles ne retiennent que la belette.\",\n        author: \"Cerise Caouette\"\n    }\n\n    //Generate a random quotes and author from JSON file\n    randomNumb = () => {\n        return Math.floor(Math.random() * (jsonQuotes.quotes.length - 1));\n    }\n\n    //Set a random quotes and author on first load\n    componentDidMount() {\n        this.setState({\n            sentence: jsonQuotes.quotes[this.randomNumb()].quote,\n            author: jsonQuotes.quotes[this.randomNumb()].author\n        })\n    }\n\n    //Set a random sentence and author on click\n    randomQuoteAndAuthor = () => {\n        this.setState({\n            sentence: jsonQuotes.quotes[this.randomNumb()].quote,\n            author: jsonQuotes.quotes[this.randomNumb()].author\n        })\n    }\n\n    render() {\n        return (\n            <div id=\"quote-box\">\n                <QuoteText randomSentence={this.state.sentence} randomColor={this.props.randomColor} />\n                <QuoteAuthor randomAuthor={this.state.author} randomColor={this.props.randomColor} />\n                <Buttons randomSentence={this.state.sentence} randomAuthor={this.state.author} randomclick={this.randomQuoteAndAuthor} onclick={this.props.onclick} randomColor={this.props.randomColor} />\n            </div>\n        )\n    }\n}\nexport default QuoteBox;","import React, { Component } from 'react';\nimport QuoteBox from './QuoteBox';\nimport './QuoteWrapper.css';\n\nclass QuotesWrapper extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            randomColor: '#144454'\n        }\n    }\n\n\n    //Generate a random color with a minimal brightness threshold\n    randomChannel = () => {\n        var r = 255 - 10;\n        var n = 0 | ((Math.random() * r) + 10);\n        var s = n.toString(16);\n        return (s.length === 1) ? '0' + s : s;\n    }\n\n    //Set a random color on first load on State\n    componentDidMount() {\n        this.setState({\n            randomColor: '#' + this.randomChannel() + this.randomChannel() + this.randomChannel()\n        })\n    }\n\n    //Set the random hex color code on click\n    newBackgroundColor = () => {\n        this.setState({\n            randomColor: '#' + this.randomChannel() + this.randomChannel() + this.randomChannel()\n        })\n    }\n\n\n    render() {\n        return (\n            <div style={{ backgroundColor: this.state.randomColor }} id=\"wrapper\">\n                <QuoteBox randomColor={this.state.randomColor} onclick={this.newBackgroundColor} />\n            </div>\n        )\n    }\n}\n\nexport default QuotesWrapper;\n\n\n\n//// BUGS TO FIXED //////\n// 1. amélioration : couleur random avec un seuil de luminosité maximale\n// 2. fondu transition pour l'apparition de la phrase et de l'auteur aléatoire. PAS TROUVÉ DE SOLUTIONS, CREUSER POUR TROUVER UNE SOLUTION CSS\n\n\n\n////// BUGS FIXED //////\n//bug : de temps en temps, la méthode randomNumb de la fonction randomQuoteAndAuthor dans QuoteBox crash.\n// 3. Au chargement: faire apparaître une citation aléatoirement.\n\n\n//1. Algorithme en cours de création pour générer une couleur avec une luminosité mini :\n// newBackgroundColor = () => {\n//     function getColor() {\n//         return \"hsl(\" + 360 * Math.random() + ',' +\n//             (25 + 70 * Math.random()) + '%,' +\n//             (85 + 10 * Math.random()) + '%)';\n//     }\n//     console.log(getColor())\n//     this.setState({\n//         randomColor: this.getColor()\n//     })\n// }","import React from 'react';\nimport './App.css';\nimport QuotesWrapper from './RandomQuotesMachine/QuotesWrapper';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuotesWrapper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}